name: Continuous Integration

on:
    push:
      branches: [ "master" ]
    pull_request:
      branches: [ "master" ]

env:
    DOTNET_VERSION: 7.0.x
    APP_PROJECT_PATH: ${{ github.workspace }}/src/WinApp/WinApp.csproj
    UPDATER_PROJECT_PATH: ${{ github.workspace }}/src/Updater/Updater.csproj
    INSTALLER_PROJECT_PATH: ${{ github.workspace }}/installer/BrannSetup/BrannSetup.wixproj
    APP_BINARIES_FOLDER: ${{ github.workspace }}/artifacts/binaries
    APP_UNIT_TESTS_PATH: ${{ github.workspace }}/tests/Unit.Tests/Unit.Tests.csproj
    APP_UNIT_TESTS_BINARIES_FOLDER: ${{ github.workspace }}/artifacts/unit-tests

jobs:
    version:
        name: Version
        runs-on: windows-2022
        outputs:
            informationVersion: ${{ steps.version.outputs.informationalVersion }} 
            fileVersion: ${{ steps.version.outputs.majorMinorPatch }}
            version: ${{ steps.version.outputs.assemblySemVer }}
        
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
                fetch-depth: 0
        
          - name: Install GitVersion
            uses: gittools/actions/gitversion/setup@v1.1.1
            with:
                versionSpec: '5.x'

          - name: Determine Version
            id: version
            uses: gittools/actions/gitversion/execute@v1.1.1   

    build:
        strategy:
            matrix:
                include:
                  - os: macos-14
                    name: macOS
                  - os: windows-2022
                    name: Windows

        name: Build ${{ matrix.name }}
        needs: version
        runs-on: ${{ matrix.os }}

        env:
            APP_INFORMATION_VERSION: ${{ needs.version.outputs.informationVersion }}
            APP_FILE_VERSION: ${{ needs.version.outputs.fileVersion }}
            APP_VERSION: ${{ needs.version.outputs.version }}

        steps:
          - name: Clone repository
            uses: actions/checkout@v4

          - name: Setup dotnet
            uses: actions/setup-dotnet@v4
            with:
              dotnet-version: | 
                ${{ env.DOTNET_VERSION }}

          - name: Restore solution
            run: dotnet restore

          - name: Build solution
            run: dotnet build --no-restore /p:FileVersion=${{ env.APP_FILE_VERSION }} /p:AssemblyVersion=${{ env.APP_VERSION }} /p:InformationalVersion=${{ env.APP_INFORMATION_VERSION }}
            
          - name: Publish application
            run: dotnet publish ${{ env.APP_PROJECT_PATH }} -o ${{ env.APP_BINARIES_FOLDER }} --no-restore --no-build
            
          - name: Publish updater
            run: dotnet publish ${{ env.UPDATER_PROJECT_PATH }} -o ${{ env.APP_BINARIES_FOLDER }} --no-restore --no-build

          - name: Publish unit tests
            run: dotnet publish ${{ env.APP_UNIT_TESTS_PATH }} -o ${{ env.APP_UNIT_TESTS_BINARIES_FOLDER }} --no-restore --no-build

          - uses: actions/cache@v3
            with:
              path: ${{ env.APP_BINARIES_FOLDER}}
              key: ${{ matrix.name }}-app

          - uses: actions/cache@v3
            with:
              path: ${{ env.APP_UNIT_TESTS_BINARIES_FOLDER}}
              key: ${{ matrix.name }}-unit-tests

    tests:
      strategy:
          matrix:
            include:
              - os: macos-14
                name: macOS
              - os: windows-2022
                name: Windows

      name: Test ${{ matrix.name }}
      needs: build
      runs-on: ${{ matrix.os }}

      steps:
        - uses: actions/cache@v3
          with:
            path: ${{ env.APP_UNIT_TESTS_BINARIES_FOLDER}}
            key: ${{ matrix.name }}-unit-tests
        
        - name: Run unit tests
          if: matrix.os == 'windows-2022'
          run: ${{ env.APP_UNIT_TESTS_BINARIES_FOLDER }}/Accolades.Brann.Unit.Tests.exe

        - name: Run unit tests
          if: matrix.os == 'macos-14'
          run: ${{ env.APP_UNIT_TESTS_BINARIES_FOLDER }}/Accolades.Brann.Unit.Tests
          
    package:
      strategy:
        matrix:
          include:
            - os: windows-2022
              name: Windows
      
      name: Package ${{ matrix.name }}
      needs: [version,build]
      runs-on: ${{ matrix.os }}

      env:
        APP_INFORMATION_VERSION: ${{ needs.version.outputs.informationVersion }}
        APP_FILE_VERSION: ${{ needs.version.outputs.fileVersion }}
        APP_VERSION: ${{ needs.version.outputs.version }}

      steps:
        - uses: actions/checkout@v4

        - name: Clone repository
          uses: actions/checkout@v4

        - uses: actions/cache@v3
          with:
            path: ${{ env.APP_BINARIES_FOLDER}}
            key: ${{ matrix.name }}-app

        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: | 
              ${{ env.DOTNET_VERSION }}

        - name: Add msbuild to PATH
          uses: microsoft/setup-msbuild@v2  

        - name: Build solution
          run: |
            cd installer
            msbuild ${{ env.INSTALLER_PROJECT_PATH }}
